module Proto.Trade_signal exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/trade_signal.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias TradeSignal =
    { market : String -- 1
    , amount : String -- 2
    , currency : String -- 3
    , order : TradeSignal_OrderType -- 4
    }


type TradeSignal_OrderType
    = TradeSignal_Buy -- 0
    | TradeSignal_Sell -- 1


tradeSignalDecoder : JD.Decoder TradeSignal
tradeSignalDecoder =
    JD.lazy <| \_ -> decode TradeSignal
        |> required "Market" JD.string ""
        |> required "Amount" JD.string ""
        |> required "Currency" JD.string ""
        |> required "order" tradeSignal_OrderTypeDecoder tradeSignal_OrderTypeDefault


tradeSignal_OrderTypeDecoder : JD.Decoder TradeSignal_OrderType
tradeSignal_OrderTypeDecoder =
    let
        lookup s =
            case s of
                "buy" ->
                    TradeSignal_Buy

                "sell" ->
                    TradeSignal_Sell

                _ ->
                    TradeSignal_Buy
    in
        JD.map lookup JD.string


tradeSignal_OrderTypeDefault : TradeSignal_OrderType
tradeSignal_OrderTypeDefault = TradeSignal_Buy


tradeSignalEncoder : TradeSignal -> JE.Value
tradeSignalEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "Market" JE.string "" v.market)
        , (requiredFieldEncoder "Amount" JE.string "" v.amount)
        , (requiredFieldEncoder "Currency" JE.string "" v.currency)
        , (requiredFieldEncoder "order" tradeSignal_OrderTypeEncoder tradeSignal_OrderTypeDefault v.order)
        ]


tradeSignal_OrderTypeEncoder : TradeSignal_OrderType -> JE.Value
tradeSignal_OrderTypeEncoder v =
    let
        lookup s =
            case s of
                TradeSignal_Buy ->
                    "buy"

                TradeSignal_Sell ->
                    "sell"

    in
        JE.string <| lookup v
