module Proto.Algorun exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/algorun.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Algorun =
    { id : String -- 1
    , algorithmId : String -- 2
    , accountId : String -- 3
    , scheduleId : String -- 4
    , status : String -- 5
    }


type Algorun_States
    = Algorun_Unknown -- 0
    | Algorun_Stopped -- 1
    | Algorun_Running -- 2
    | Algorun_Deleted -- 3


algorunDecoder : JD.Decoder Algorun
algorunDecoder =
    JD.lazy <| \_ -> decode Algorun
        |> required "Id" JD.string ""
        |> required "AlgorithmId" JD.string ""
        |> required "AccountId" JD.string ""
        |> required "ScheduleId" JD.string ""
        |> required "Status" JD.string ""


algorun_StatesDecoder : JD.Decoder Algorun_States
algorun_StatesDecoder =
    let
        lookup s =
            case s of
                "unknown" ->
                    Algorun_Unknown

                "stopped" ->
                    Algorun_Stopped

                "running" ->
                    Algorun_Running

                "deleted" ->
                    Algorun_Deleted

                _ ->
                    Algorun_Unknown
    in
        JD.map lookup JD.string


algorun_StatesDefault : Algorun_States
algorun_StatesDefault = Algorun_Unknown


algorunEncoder : Algorun -> JE.Value
algorunEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "Id" JE.string "" v.id)
        , (requiredFieldEncoder "AlgorithmId" JE.string "" v.algorithmId)
        , (requiredFieldEncoder "AccountId" JE.string "" v.accountId)
        , (requiredFieldEncoder "ScheduleId" JE.string "" v.scheduleId)
        , (requiredFieldEncoder "Status" JE.string "" v.status)
        ]


algorun_StatesEncoder : Algorun_States -> JE.Value
algorun_StatesEncoder v =
    let
        lookup s =
            case s of
                Algorun_Unknown ->
                    "unknown"

                Algorun_Stopped ->
                    "stopped"

                Algorun_Running ->
                    "running"

                Algorun_Deleted ->
                    "deleted"

    in
        JE.string <| lookup v
