module Proto.Algolog exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/algolog.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Algolog =
    { id : String -- 1
    , createdAt : String -- 2
    , algorunId : String -- 3
    , event : String -- 4
    , level : String -- 5
    , message : String -- 6
    }


algologDecoder : JD.Decoder Algolog
algologDecoder =
    JD.lazy <| \_ -> decode Algolog
        |> required "Id" JD.string ""
        |> required "CreatedAt" JD.string ""
        |> required "AlgorunId" JD.string ""
        |> required "Event" JD.string ""
        |> required "Level" JD.string ""
        |> required "Message" JD.string ""


algologEncoder : Algolog -> JE.Value
algologEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "Id" JE.string "" v.id)
        , (requiredFieldEncoder "CreatedAt" JE.string "" v.createdAt)
        , (requiredFieldEncoder "AlgorunId" JE.string "" v.algorunId)
        , (requiredFieldEncoder "Event" JE.string "" v.event)
        , (requiredFieldEncoder "Level" JE.string "" v.level)
        , (requiredFieldEncoder "Message" JE.string "" v.message)
        ]
