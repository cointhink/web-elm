module Proto.Schedule exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/schedule.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Schedule =
    { id : String -- 1
    , accountId : String -- 2
    , algorithmId : String -- 3
    , status : Schedule_States -- 4
    , initialState : String -- 5
    }


type Schedule_States
    = Schedule_Unknown -- 0
    | Schedule_Stopped -- 1
    | Schedule_Running -- 2


scheduleDecoder : JD.Decoder Schedule
scheduleDecoder =
    JD.lazy <| \_ -> decode Schedule
        |> required "Id" JD.string ""
        |> required "AccountId" JD.string ""
        |> required "AlgorithmId" JD.string ""
        |> required "Status" schedule_StatesDecoder schedule_StatesDefault
        |> required "InitialState" JD.string ""


schedule_StatesDecoder : JD.Decoder Schedule_States
schedule_StatesDecoder =
    let
        lookup s =
            case s of
                0 ->
                    Schedule_Unknown

                1 ->
                    Schedule_Stopped

                2 ->
                    Schedule_Running

                _ ->
                    Schedule_Unknown
    in
        JD.map lookup JD.int


schedule_StatesDefault : Schedule_States
schedule_StatesDefault = Schedule_Unknown


scheduleEncoder : Schedule -> JE.Value
scheduleEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "Id" JE.string "" v.id)
        , (requiredFieldEncoder "AccountId" JE.string "" v.accountId)
        , (requiredFieldEncoder "AlgorithmId" JE.string "" v.algorithmId)
        , (requiredFieldEncoder "Status" schedule_StatesEncoder schedule_StatesDefault v.status)
        , (requiredFieldEncoder "InitialState" JE.string "" v.initialState)
        ]


schedule_StatesEncoder : Schedule_States -> JE.Value
schedule_StatesEncoder v =
    let
        lookup s =
            case s of
                Schedule_Unknown ->
                    0

                Schedule_Stopped ->
                    1

                Schedule_Running ->
                    2

    in
        JE.int <| lookup v


schedule_StatesNames : Schedule_States -> String
schedule_StatesNames v =
    case v of
        Schedule_Unknown ->
            "unknown"

        Schedule_Stopped ->
            "stopped"

        Schedule_Running ->
            "running"

